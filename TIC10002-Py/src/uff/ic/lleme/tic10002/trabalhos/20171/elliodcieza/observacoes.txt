Escolhi usar a estrutura de dados Árvore Binária Balanceada para armazenar a coleçao de
objetos "vendas", por ser um estrutura eficiente para lidar com uma grande quantidade de dados.
Não sendo necessário percorrer toda árvore para para encontrar uma chave, onde a ordem complexidade
no pior caso é apenas O(log n).

Os objetos "vendas" são inseridos na árvore pela chave (venda.código_filial), garantindo a ordenação
destes objetos pelo código da filial na Árvore Binária Balanceada.

Iniciei a implementação armazenando a coleçao de objetos "vendas" em uma lista dinâmica
e reparei que o tempo de carregamento do arquivo na memória RAM aumentou um pouco quando
mudei para a Árvore Binária Balanceada.  Isto se deve às operações de balanceamento que
são chamadas durante a inserção dos objetos na árvore. Notei que o tempo das operações
de consulta do total de vendas também diminuiu (como era esperado).


O programa lê a entrada de um arquivo (dados.txt) que está incluso no zip do projeto.
Este arquivo tem somente 150.000 linhas para não dificultar o envio do projeto por email.
Mas é possível gerar outro arquivo com a função gera_arquivo(), como não é necessário gerar um
arquivo diferente a cada execução do programa, deixei a linha que gera o arquivo comentada (linha 236).

Existem duas versões do programa no zip do projeto caso haja algum problema na visualização
da saída no terminal.  A versão "main.py" imprime com uma formatação colorida, é possível que
a IDE usada não seja capaz de exibir as cores de forma apropriada, portanto, uma segunda versão
foi incluida: "main_sem_cores.py" que imprime a saída sem nenhuma formatação.
